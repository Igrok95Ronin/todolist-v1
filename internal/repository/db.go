package repository

import (
	"database/sql"
	"fmt"
	"log"
	_ "modernc.org/sqlite"
	"sync"
)

var (
	dbInstance *sql.DB
	once       sync.Once
	dbErr      error
)

// GetDB –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Singleton-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
func GetDB() (*sql.DB, error) {
	once.Do(func() {
		// –í SQLite –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		// TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
		dbPath := "./db.sqlite"

		// TODO: –≤—ã–Ω–µ—Å—Ç–∏ –æ—à–∏–±–∏
		dbInstance, dbErr = sql.Open("sqlite", dbPath)
		if dbErr != nil {
			dbErr = fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SQLite: %w", dbErr)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		if err := dbInstance.Ping(); err != nil {
			dbInstance.Close()
			dbErr = fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SQLite: %w", err)
			return
		}

		// TODO: —Å–¥–µ–ª–∞—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	})

	return dbInstance, dbErr
}

// CloseDB –∑–∞–∫—Ä—ã–≤–∞–µ—Ç SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func CloseDB() {
	if dbInstance != nil {
		dbInstance.Close()
		log.Println("üîå SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
	}
}
