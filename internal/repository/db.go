package repository

import (
	"database/sql"
	"fmt"
	"github.com/Igrok95Ronin/todolist-v1.git/internal/config"
	"github.com/Igrok95Ronin/todolist-v1.git/pkg/logging"
	_ "modernc.org/sqlite"
	"sync"
)

type DB struct {
	instance *sql.DB
	once     sync.Once
	err      error
	cfg      *config.Config
	logger   *logging.Logger
}

type DBOption func(*DB)

func NewDB(option ...DBOption) *DB {
	db := &DB{}

	for _, opt := range option {
		opt(db)
	}

	return db
}

// With –§—É–Ω–∫—Ü–∏–∏-–æ–ø—Ü–∏–∏
func WithConfig(cfg *config.Config) DBOption {
	return func(d *DB) {
		d.cfg = cfg
	}
}

func WithLogger(logger *logging.Logger) DBOption {
	return func(d *DB) {
		d.logger = logger
	}
}

// Connect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Singleton-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
func (d *DB) Connect() (*sql.DB, error) {
	d.once.Do(func() {
		// –í SQLite –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		// TODO: –≤—ã–Ω–µ—Å—Ç–∏ –æ—à–∏–±–∏
		d.instance, d.err = sql.Open("sqlite", d.cfg.DBPath)
		if d.err != nil {
			d.err = fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è SQLite: %w", d.err)
			return
		}

		// –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		if err := d.instance.Ping(); err != nil {
			d.instance.Close()
			d.err = fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ SQLite: %w", err)
			return
		}

		d.logger.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	})

	return d.instance, d.err
}

// CloseDB –∑–∞–∫—Ä—ã–≤–∞–µ—Ç SQLite —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
func (d *DB) Close() {
	if d.instance != nil {
		d.instance.Close()
		d.logger.Info("üîå SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
	}
}
