package logging

import (
	"fmt"
	"github.com/sirupsen/logrus"
	"io"
	"os"
	"path"
	"runtime"
	"sync"
)

///////////////////////////////////////////////////////
// üîß –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ö—É–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç
///////////////////////////////////////////////////////

type writeHook struct {
	Writer    []io.Writer    // –°–ø–∏—Å–æ–∫ writer'–æ–≤, –∫—É–¥–∞ –ø–∏—Å–∞—Ç—å –ª–æ–≥
	LogLevels []logrus.Level // –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
}

// Fire –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤ ‚Äî –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ –∫–∞–∂–¥—ã–π writer
func (hook *writeHook) Fire(entry *logrus.Entry) error {
	line, err := entry.String()
	if err != nil {
		return err
	}
	for _, w := range hook.Writer {
		_, err = w.Write([]byte(line))
		if err != nil {
			return err
		}
	}
	return nil
}

// Levels –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –∞–∫—Ç–∏–≤–µ–Ω —Ö—É–∫
func (hook *writeHook) Levels() []logrus.Level {
	return hook.LogLevels
}

///////////////////////////////////////////////////////
// üì¶ Singleton-–ª–æ–≥–≥–µ—Ä
///////////////////////////////////////////////////////

// Logger ‚Äî –æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ logrus.Entry
type Logger struct {
	*logrus.Entry
}

var (
	instance *Logger   // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
	once     sync.Once // –ì–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
)

// GetLogger –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Singleton-–ª–æ–≥–≥–µ—Ä, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—è –µ–≥–æ –æ–¥–∏–Ω —Ä–∞–∑
func GetLogger() *Logger {
	once.Do(func() {
		// 1. –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π logrus.Logger
		l := logrus.New()
		l.SetReportCaller(true) // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–π–ª –∏ —Å—Ç—Ä–æ–∫—É –≤ –ª–æ–≥–∞—Ö

		// 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
		l.Formatter = &logrus.TextFormatter{
			FullTimestamp:   true,
			TimestampFormat: "2006-01-02 15:04:05",
			DisableColors:   false,
			ForceColors:     true,
			PadLevelText:    true,
			DisableQuote:    true,
			CallerPrettyfier: func(frame *runtime.Frame) (string, string) {
				filename := path.Base(frame.File)
				return fmt.Sprintf("%s()", frame.Function), fmt.Sprintf("%s:%d", filename, frame.Line)
			},
		}

		// 3. –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
		if err := os.MkdirAll("logs", 0644); err != nil {
			panic(fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é logs: %v", err))
		}

		// 4. –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
		allFile, err := os.OpenFile("logs/all.logs", os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0640)
		if err != nil {
			panic(fmt.Sprintf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤: %v", err))
		}

		// 5. –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ logrus
		l.SetOutput(io.Discard)

		// 6. –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫, –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π –≤ —Ñ–∞–π–ª –∏ stdout
		l.AddHook(&writeHook{
			Writer:    []io.Writer{allFile, os.Stdout},
			LogLevels: logrus.AllLevels,
		})

		// 7. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
		l.SetLevel(logrus.TraceLevel)

		// 8. –°–æ–∑–¥–∞—ë–º –æ–±—ë—Ä—Ç–∫—É Logger
		instance = &Logger{logrus.NewEntry(l)}
	})

	return instance
}

// GetLoggerWithField –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func (l *Logger) GetLoggerWithField(key string, value interface{}) *Logger {
	return &Logger{l.WithField(key, value)}
}
